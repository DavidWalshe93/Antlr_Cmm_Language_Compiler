int integer;
char character;
double real;
int[8][3] fibonacci;

typedef int myInt, myInteger;
typedef char myChar, myCharacter, myLetter;
typedef double myDouble, myFloat;
typedef char[100][50][25] myTestChar;
typedef type myInt[10][5] myIntArray;
typedef char[10][5] myCharArray;
typedef double[10][5] myDoubleArray;

typedef struct {
    int me;
} test;

typedef struct {
    type myInt level;
    type myIntArray points;
    type myDoubleArray speed;
    int[10][5] experience;
    double a, b, c;
    char q, w, e;
    type myInt[10][10] myInts;
    type test[30][20] my;
} myStruct;

void p(type myInt value, type myChar ch, type myDouble d, type myDouble d, type myDouble d) {

}

int f(double r, int e) {
  double real;
  char c;
  int result;
  type myInt myVal;
  i = stru.myarr[20][20] + myVal.hello[10].world;
  real = r * 10.0;
  c='0';
  if (e < 256) {
    c = (char)e;
    result = (int)c;
  }
  else
    result = (int)real;
  return result;
}

void initialize() {
  int i;
  fibonacci[0][0] = 0;
  fibonacci[0][1] = 1;
  fibonacci[0][2] = 1;
  i = 1;
  while(i < 8) {
    fibonacci[i][0] = fibonacci[i - 1][1];
    fibonacci[i][1] = fibonacci[i - 1][2];
    fibonacci[i][2] = fibonacci[i][0] + fibonacci[i][1];
    i = i + 1;
  }
}


void main(){
  int i;
  int j;
  char ch;
  p();
  i=0;
  ch = '0';

  // * Shows 48 (decimal value of '0')
  write f((double)i, (int)ch);
  write '\n';

  f(1.3, 2);

  initialize();
  i = 0;
  while(i < 8) {
    // Shows the Fib sequence, from 1 to 8 (34)
    write '(';
    write i + 1;
    write ')';
    write fibonacci[i][0];
    write '+';
    write fibonacci[i][1];
    write '=';
    write fibonacci[i][2];
    write '\n';
    i = i + 1;
  }
}

